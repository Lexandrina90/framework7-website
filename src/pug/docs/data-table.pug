extends ../_docs-template

block vars
  - var title = 'Data Table | Framework7 Documentation';

block docs-index

block content


  .docs-nav
    include ../_docs-menu
  .docs-content
    .motion-docs-page-title
      h1 Data Table
      script(src="/js/motion/datatable.js")
      f7-motion-datatable(motion)

    p Data tables display sets of raw data. They usually appear in desktop enterprise products
    h2 Table Layout
    p Common Data Table layout could be treated as the following:
    +examplePreview('core', 'data-table.f7.html', 'data-table')

    p Where
    ul
      li `data-table` - main Data Table wrapper. Required
        ul
          li `table` - table itself. Required
            ul
              li `thead` - table head
              li `tbody` - table body. Required
              li `label-cell` - main label cell (only one such kind of cell per row, usually first cell)
              li `numeric-cell` - cell to display numeric data (right-aligned)
              li `medium-only` - additional class to show this cell/column only when app width >= 768px. For full set of such responsive classes check #[a(href="grid.html#column-sizes") Grid docs]. They are `xsmall-only`, `small-only`, `medium-only`, `large-only`, `xlarge-only`.
    h2 Pagination Footer
    +examplePreview('core', 'data-table-pagination-footer.f7.html', 'data-table-pagination-footer')
    p Where
    ul
      li `data-table-footer` - data table footer main element
        ul
          li `data-table-rows-select` - container with amount per page select
          li `data-table-pagination` - container with information about current page and prev/next navigation buttons
            ul
              li `data-table-pagination-label` - current paging label
    h2 Selectable Rows
    +examplePreview('core', 'data-table-selectable.f7.html', 'data-table-selectable')
    p Where
    ul
      li `data-table-init` - additional class to enable JavaScript action required for selectable rows
      li
        p Checkbox cell. Such cell in table header will select/deselect all rows in table body:
        :code(lang="html")
              <td class="checkbox-cell">
                <label class="checkbox">
                  <input type="checkbox"/>
                  <i class="icon-checkbox"></i>
                </label>
              </td>
    h2 Inputs In Table Head
    p Such tables are widely used in admin interfaces for filtering or search data
    +examplePreview('core', 'data-table-head-inputs.f7.html', 'data-table-head-inputs')
    p Where
    ul
      li
        p `input-cell` - additional class on table cell required to display input
      li
        p `<span class="table-head-label">` - input label
      li
        p `<div class="input">` - input container

    h2 Table Title/Header
    p When data table is used within <a href="./cards.html">Card</a> it is possible to use additional data table title with actions in card header.
    +examplePreview('core', 'data-table-title.f7.html', 'data-table-title')
    p Where
    ul
      li `data-table-title` - table title
      li `data-table-actions` - main table actions
      li `data-table-header` - default table header. Visible when there are no selected rows
      li `data-table-header-selected` - selected table header. Visible when there are selected rows
      li `data-table-selected-count` - count of selected table rows. Number will be placed here by JavaScript
      li `data-table-links` - alternate/additional table actions
      li `actions-cell` - action links/icons cell

    h2 Sortable
    +examplePreview('core', 'data-table-sortable.f7.html', 'data-table-sortable')
    p Where
    ul
      li `sortable-cell` - additional class to make cell/column is sortable
      li `sortable-cell-active` - additional class to specify active/default sortable cell/column
      li `sortable-asc` - additional class to specify current sorting as ascending (default)
      li `sortable-desc` - additional class to specify current sorting as descending
    .important-note
      p Note, <b>there is no actual sortable logic</b> provided by framework. Actual sorting logic should be realized manually

    h2 Collapsible
    p The following table will be collapsed to kind of List View on small screens:
    +examplePreview('core', 'data-table-collapsible.f7.html', 'data-table-collapsible')
    p Where
    ul
      li `data-table-collapsible` - additional table class to enable collapsible logic. Note that "data-table-init" class is also required for this.
    h2 Data Table App Methods
    p In case you add data table dynamically and you need such selecting rows or switching headers logic you need to init it manually. Let's look at related app methods to work with data table:
    .method-wrap
      p
        span.method app.dataTable.create(<span>parameters</span>)
        | - create Data Table instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with data table parameters
      p.method-returns Method returns created Data Table's instance

    .method-wrap
      p
        span.method app.dataTable.destroy(<span>el</span>)
        | - destroy Data Table instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Data Table element or Data Table instance to destroy.
    .method-wrap
      p
        span.method app.dataTable.get(<span>el</span>)
        | - get Data Table instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Data Table element.
      p.method-returns Method returns Data Table's instance
    h2 Data Table Parameters
    p Now let's look at list of available parameters we need to create Data Table:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement<br>string
          td
          td Data Table element. Can be useful if you already have Data Table element in your HTML and want to create new instance using this element

    h2 Data Table Events
    p Data Table will fire the following DOM events on data table element and events on app and data table instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td datatable:sort
          td Data Table Element<span>&lt;div class="data-table"&gt;</span>
          td Event will be triggered data table sort changed
        tr
          td datatable:beforedestroy
          td Data Table Element<span>&lt;div class="data-table"&gt;</span>
          td Event will be triggered right before Data Table instance will be destroyed

    h3 App and Data Table Instance Events
    p Data Table instance emits events on both self instance and app instance. App instance events has same names prefixed with `dataTable`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td sort
          td <span>dataTable, sort</span>
          td dataTable
          td(rowspan="2") Event will be triggered data table sort changed
        tr
          td dataTableSort
          td <span>dataTable, sort</span>
          td app
        tr
          td beforeDestroy
          td <span>dataTable</span>
          td dataTable
          td(rowspan="2") Event will be triggered right before Data Table instance will be destroyed
        tr
          td dataTableBeforeDestroy
          td <span>dataTable</span>
          td app

    +cssVars('data-table')
